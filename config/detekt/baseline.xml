<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues>
    <ID>LongParameterList:ApplicationService.kt$ApplicationService$( private val applicationRepository: ApplicationRepository, private val agencyService: AgencyService, private val licenceTypeService: LicenceTypeService, private val dashboardApplicationTransfer: DashboardApplicationTransfer, private val agencyApplicationTransfer: AgencyApplicationTransfer, private val applicationModelTransfer: ApplicationModelTransfer, private val l1tResponseDTOTransfer: L1TResponseDTOTransfer, private val userService: UserService, private val l1tIntegrationService: L1TIntegrationService, private val licenceService: LicenceService, private val ddsIntegrationService: DDSIntegrationService, private val activityTypeService: ActivityTypeService, private val awsSqsUtil: AwsSqsUtil, private val authenticationFacade: AuthenticationFacade, private val encryptLicenceUtil: EncryptLicenceDataUtil, private val auditReader: AuditReader, private val rfaService: ApplicationRFAService )</ID>
    <ID>LongParameterList:ApplicationRFAService.kt$ApplicationRFAService$( @Lazy private val applicationService: ApplicationService, private val applicationRepository: ApplicationRepository, private val l1tResponseDTOTransfer: L1TResponseDTOTransfer, private val userService: UserService, private val l1tIntegrationService: L1TIntegrationService, private val awsSqsUtil: AwsSqsUtil, private val authenticationFacade: AuthenticationFacade, private val rfaRepository: RFARepository, private val auditReader: AuditReader, private val reviewerModelTransfer: ReviewerModelTransfer )</ID>
    <ID>LongMethod:ApplicationService.kt$ApplicationService$@Transactional fun processApplicationWithdrawal( applicationNumber: String, requestBody: WithdrawApplicationRequestDTO ): String</ID>
    <ID>LongParameterList:ApplicationRFAService.kt$ApplicationRFAService$( @Lazy private val applicationService: ApplicationService, private val applicationRepository: ApplicationRepository, private val l1tResponseDTOTransfer: L1TResponseDTOTransfer, private val userService: UserService, private val authenticationFacade: AuthenticationFacade, private val rfaRepository: RFARepository, private val auditReader: AuditReader, private val reviewerModelTransfer: ReviewerModelTransfer )</ID>
    <ID>LongParameterList:AuthService.kt$AuthService$( private val wogadClient: WOGADClient, private val wogadTokenRequest: WOGADTokenRequest, private val jwtParser: JwtParser, private val userService: UserService, private val jwtDao: JwtDao, private val gsibChecker: GsibChecker, @Value("\${session.ap-token-expiry}") private var apTokenExpiry: Number, @Value("\${session.ap-token-secret}") private var apTokenSecret: String )</ID>
    <ID>LongParameterList:AuthService.kt$AuthService$( private val wogadClient: WOGADClient, private val wogadTokenRequest: WOGADTokenRequest, private val jwtParser: JwtParser, private val userService: UserService, private val jwtDao: JwtDao, @Value("\${session.ap-token-expiry}") private var apTokenExpiry: Number, @Value("\${session.ap-token-secret}") private var apTokenSecret: String, @Value("\${integration.gsib.ip}") private var gsibIp: String )</ID>
    <ID>LongParameterList:ExceptionControllerAdvice.kt$ExceptionControllerAdvice$( ex: Exception, request: WebRequest, httpStatus: HttpStatus, status: String, message: String, subErrors: List&lt;SubErrorDTO&gt; = emptyList() )</ID>
    <ID>LongParameterList:LicenceService.kt$LicenceService$( private val licenceRepository: LicenceRepository, private val dashboardLicenceTransfer: DashboardLicenceTransfer, private val licenceModelTransfer: LicenceModelTransfer, private val userService: UserService, private val ddsIntegrationService: DDSIntegrationService, private val l1tIntegrationService: L1TIntegrationService, private val awsSqsUtil: AwsSqsUtil, private val authenticationFacade: AuthenticationFacade )</ID>
    <ID>MaxLineLength:AuthHeaderFilterTest.kt$AuthHeaderFilterTest$"G2B_L1T.1657736955.RS256.74d3bce3-0f54-42ad-ac84-cb80ee8d56aa.BwO2mfQ-ZL45jZHH2mvoJox6KUh6VWvc_H0uWyBjDky5u1V308KFDXm8hJeg6d9GQkqEsAJ_pXiRlzNOR3IFFit8M3j-I4xYmJufv0G7raMCS-XMejqLvV9AvFB338lXWm4eUk8inrWcyez2BmshxyixQaVFwjSQhRItzo19MuYn3u0fiV0DyXdq9VGAde1CuzBg1xFaGl7_li9GWoI3Ts0azM1siCtkdkepToWeR8JtGtyADvQo3d2_9ooDsrp5P3mh8SW7yD8doWzNklxWAX0iXoIEVGKrzHOx492ibb_O75-_wiri7LyWuiTYPuUKRsWEJ-xwGR7IxqamUgyo3A"</ID>
    <ID>MaxLineLength:AuthHeaderFilterTest.kt$AuthHeaderFilterTest$"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCyB4+K1taBRo1sLnrQPeGnf9/FtjjTnRUkDqP6wPkMxt3WzGLIZdd4rQLRUsTvdySfAnOaarO5bEeuq5UjeT0SsomZz+4TdZzCvR2zXRYnoXz5emGpgO/UPseGcgn4OlrWkSyqW6a54c/qLXUh2jsLM+idWVvEDmzYc+prusrxmGP1MIuuql9LDG8B1U07YwfSUJwTqG3xD86N6dL/VYwX+ZzlURkwLnBAkDKoRi7qmuDzXg04WUccIBAe4IjLCrTFAQYgeQBzRcBcOehNrBZenJ5MWL23hvH/wXA5Ch2Vv0BUyWQgOorEjAoSKqv04w9xiPdylLnJGzlgS2OJvfsHAgMBAAECggEAIbKmq/wQbDXjjQebPZGJBgCBZdYhGYURPFr9FPiz64Q093SGejI0v+XXs7F8D2u45dQ7942c6UsiomBeAXHwanqa6x9djBdmDcJoPcwv5l593mcY11HNk5oygDNTycWZ7iValAB3JZYlmcjy8+5v4KX5sNb6NLkaRzphs/SOd341CrPS9pqlXaYPnXd2r+vOMXXA3mfClUc1KCJgSd7tkWb1oMClqLFTyKy6y8SPryhNk4d8RfZXFf6Vv3IzqUjMhdM6k+KKr85xcT7Vh55ZKMk5SMqfL7+cRTSb9hsFyUcgUNthi+/z7YEf9/tlXSC7pJKoZDdviF4x2ndjC7BxeQKBgQDb6lllJKRXsM0pIYVH6ijUuYwx3cvabVSHbBpDB6ByJ27Mu7KEh4/9mSSwhKiB5x8mVpBSqkd2K111c80OeaBGmmSDudgzeeD4xXDPySco13ruI/4/S6Je2paUcLA9jLpgbDg7TDG0gAUPglOmvLtERlAToSm3O+arM8AhgJfYDQKBgQDPPcZhM2s2dnQ+Bfki8aCY5I6g5Q4v+3iHgw+sHHUJF9gzXqvM6F3Nrtv4K+zZnZl43fPufRfsdo47smc4Sm5VraPJLtLallrT2o0b7xxtbqX9TD4uOBP04pMnVwjWJNwlWg4mA9xDoi0YdmMd4+Sqrh2RRfUzDV2ePIhWbGGmYwKBgQCmo4Fxvr45JGORkzDnOWwPJToyXxqlPMscgrGzsQfG+FJhGKlA+2gEhhLjHuKA7J0R8+4Qda8Iv/tlkIYFPexRE5SurBhDiUsLtrCxAn+F1yHzaZqyY6F5trD7chhZy1U+00IYzLetSoSLJ/ozEjfkmFL9TNXLXrx/ZgtkV4i30QKBgGtFe6Emn3FSgTr1lo7q6YkajWVlCyH1Fd93DK63EDGDwSpd76miAaQMxdnAytmdxSoWIUSqRa7lcxwdbWZqyI/a0HO7o/L3bs5IS1BRRbKzWoIxa+I6rsHMYgUz/OPzsmw3ICm3R9VOZe9KoGWBaASdGbrvrksduP7GMIAjm6wnAoGBALqkCh8J8wbhJx4UpIdfW3ofxCkKa0PYhjXEdSK3dDkaAMkReW0xBn9F2PAWF9Rx+CtTjtJfOeNGVvnG+l98ZqjFFu4KEp2FU1AbW8ziS8eWewjDWPpRAZdULa/SSgPLATB9AdUdwea/YCzZn6VuFOkcVXZrgk1bl5d3D1onXoTJ"</ID>
    <ID>MaxLineLength:AuthHeaderTest.kt$AuthHeaderTest.Companion$"MIIDYDCCAkgCCQCH3SMgX2SGDTANBgkqhkiG9w0BAQsFADByMQswCQYDVQQGEwJzZzELMAkGA1UECAwCc2cxCzAJBgNVBAcMAnNnMQswCQYDVQQKDAJzZzELMAkGA1UECwwCc2cxCzAJBgNVBAMMAnNnMSIwIAYJKoZIhvcNAQkBFhNucmFqcHV0QHBhbG8taXQuY29tMB4XDTIyMDYyODEwMjA0MloXDTIzMDYyODEwMjA0MlowcjELMAkGA1UEBhMCc2cxCzAJBgNVBAgMAnNnMQswCQYDVQQHDAJzZzELMAkGA1UECgwCc2cxCzAJBgNVBAsMAnNnMQswCQYDVQQDDAJzZzEiMCAGCSqGSIb3DQEJARYTbnJhanB1dEBwYWxvLWl0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALIHj4rW1oFGjWwuetA94ad/38W2ONOdFSQOo/rA+QzG3dbMYshl13itAtFSxO93JJ8Cc5pqs7lsR66rlSN5PRKyiZnP7hN1nMK9HbNdFiehfPl6YamA79Q+x4ZyCfg6WtaRLKpbprnhz+otdSHaOwsz6J1ZW8QObNhz6mu6yvGYY/Uwi66qX0sMbwHVTTtjB9JQnBOobfEPzo3p0v9VjBf5nOVRGTAucECQMqhGLuqa4PNeDThZRxwgEB7giMsKtMUBBiB5AHNFwFw56E2sFl6cnkxYvbeG8f/BcDkKHZW/QFTJZCA6isSMChIqq/TjD3GI93KUuckbOWBLY4m9+wcCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEArnusfcsKaOigr09QrdXpe1BojhCA+oHEXeTU0cK9evmpfOnPEdEuG8RhpKCiUSqECBHP8a2xahrplTb033J9iIRRbJR2KMqm01g32c1RdlJut0f7h7nLtvZKzvz6aynANZE5VrnNkyfHGXE/OFGBsNXfC/DyZeVPrC71cdY3IigCBP6lE3o3cTzmqcnMDsM6tdjFvZu407yDt3RvKMc/OCUSkvWV/tKfxk+k9vePXtLxWvSffp8b1iH0BlIswbLWpbbtBFJ9ktyj4ASP3Tb3cZDq4iDK2E1xzTdpS/X4h9hiZBCpXy4mipgxluPXS+/CE2iDni2/zT6kJdxZsTfb5g=="</ID>
    <ID>MaxLineLength:AuthHeaderTest.kt$AuthHeaderTest.Companion$"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCyB4+K1taBRo1sLnrQPeGnf9/FtjjTnRUkDqP6wPkMxt3WzGLIZdd4rQLRUsTvdySfAnOaarO5bEeuq5UjeT0SsomZz+4TdZzCvR2zXRYnoXz5emGpgO/UPseGcgn4OlrWkSyqW6a54c/qLXUh2jsLM+idWVvEDmzYc+prusrxmGP1MIuuql9LDG8B1U07YwfSUJwTqG3xD86N6dL/VYwX+ZzlURkwLnBAkDKoRi7qmuDzXg04WUccIBAe4IjLCrTFAQYgeQBzRcBcOehNrBZenJ5MWL23hvH/wXA5Ch2Vv0BUyWQgOorEjAoSKqv04w9xiPdylLnJGzlgS2OJvfsHAgMBAAECggEAIbKmq/wQbDXjjQebPZGJBgCBZdYhGYURPFr9FPiz64Q093SGejI0v+XXs7F8D2u45dQ7942c6UsiomBeAXHwanqa6x9djBdmDcJoPcwv5l593mcY11HNk5oygDNTycWZ7iValAB3JZYlmcjy8+5v4KX5sNb6NLkaRzphs/SOd341CrPS9pqlXaYPnXd2r+vOMXXA3mfClUc1KCJgSd7tkWb1oMClqLFTyKy6y8SPryhNk4d8RfZXFf6Vv3IzqUjMhdM6k+KKr85xcT7Vh55ZKMk5SMqfL7+cRTSb9hsFyUcgUNthi+/z7YEf9/tlXSC7pJKoZDdviF4x2ndjC7BxeQKBgQDb6lllJKRXsM0pIYVH6ijUuYwx3cvabVSHbBpDB6ByJ27Mu7KEh4/9mSSwhKiB5x8mVpBSqkd2K111c80OeaBGmmSDudgzeeD4xXDPySco13ruI/4/S6Je2paUcLA9jLpgbDg7TDG0gAUPglOmvLtERlAToSm3O+arM8AhgJfYDQKBgQDPPcZhM2s2dnQ+Bfki8aCY5I6g5Q4v+3iHgw+sHHUJF9gzXqvM6F3Nrtv4K+zZnZl43fPufRfsdo47smc4Sm5VraPJLtLallrT2o0b7xxtbqX9TD4uOBP04pMnVwjWJNwlWg4mA9xDoi0YdmMd4+Sqrh2RRfUzDV2ePIhWbGGmYwKBgQCmo4Fxvr45JGORkzDnOWwPJToyXxqlPMscgrGzsQfG+FJhGKlA+2gEhhLjHuKA7J0R8+4Qda8Iv/tlkIYFPexRE5SurBhDiUsLtrCxAn+F1yHzaZqyY6F5trD7chhZy1U+00IYzLetSoSLJ/ozEjfkmFL9TNXLXrx/ZgtkV4i30QKBgGtFe6Emn3FSgTr1lo7q6YkajWVlCyH1Fd93DK63EDGDwSpd76miAaQMxdnAytmdxSoWIUSqRa7lcxwdbWZqyI/a0HO7o/L3bs5IS1BRRbKzWoIxa+I6rsHMYgUz/OPzsmw3ICm3R9VOZe9KoGWBaASdGbrvrksduP7GMIAjm6wnAoGBALqkCh8J8wbhJx4UpIdfW3ofxCkKa0PYhjXEdSK3dDkaAMkReW0xBn9F2PAWF9Rx+CtTjtJfOeNGVvnG+l98ZqjFFu4KEp2FU1AbW8ziS8eWewjDWPpRAZdULa/SSgPLATB9AdUdwea/YCzZn6VuFOkcVXZrgk1bl5d3D1onXoTJ"</ID>
    <ID>MaxLineLength:JwtParserTest.kt$JwtParserTest$val token = "eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJBZ2VuY3kgUG9ydGFsIiwic3ViIjoiRXVuaWNlX1BPSEB0ZWNoLmdvdi5zZyIsImV4cCI6MTY2Mzc2MDMxNCwicm9sZSI6ImFnZW5jeV9vZmZpY2VyX3JvIn0.mNnh95taT6IRdWS3gVVN2qzdLQ1qZQyj5N4fZhVZbMp9RIfq_6VEUu_ltShsGcrlsdkkwxsLKwrUCr2sJtsedQ"</ID>
    <ID>ThrowsCount:ApplicationService.kt$ApplicationService$@Transactional fun approveApplication( applicationNumber: String, licenceFile: MultipartFile?, additionalDocuments: MultipartFile?, requestBody: ApproveApplicationRequestDTO )</ID>
    <ID>ThrowsCount:ApplicationService.kt$ApplicationService$@Transactional fun claimApplication(applicationNumber: String)</ID>
    <ID>ThrowsCount:ApplicationService.kt$ApplicationService$@Transactional fun rejectApplication(applicationNumber: String, rejectMessagesDTO: RejectMessagesDTO)</ID>
    <ID>ThrowsCount:ApplicationRFAService.kt$ApplicationRFAService$@Transactional fun sendRFA(applicationNumber: String, requestBody: SendRFADTO)</ID>
    <ID>ThrowsCount:UserService.kt$UserService$private fun getAndValidateUserByUserId(userId: Long): User</ID>
    <ID>ThrowsCount:ApplicationService.kt$ApplicationService$@Transactional fun processApplicationWithdrawal( applicationNumber: String, requestBody: WithdrawApplicationRequestDTO ): WithdrawApplicationResponseDTO</ID>
    <ID>TooManyFunctions:Application.kt$ApplicationStatus$Companion</ID>
    <ID>ThrowsCount:ApplicationRFAService.kt$ApplicationRFAService$@Transactional fun cancelRFA(applicationNumber: String, requestBody: CancelRFARequestDTO): CancelRFAResponseDTO</ID>
    <ID>TooManyFunctions:ApplicationService.kt$ApplicationService</ID>
    <ID>TooManyFunctions:ExceptionControllerAdvice.kt$ExceptionControllerAdvice : ResponseEntityExceptionHandler</ID>
    <ID>TooManyFunctions:LicenceService.kt$LicenceService</ID>
    <ID>TooManyFunctions:UserService.kt$UserService</ID>
    <ID>UnusedPrivateMember:AwsSqsUtil.kt$AwsSqsUtil$@Value("\${aws.sqs.start-app-workflow-url}") private lateinit var startApplicationQueueUrl: String</ID>
    <ID>UnusedPrivateMember:L1TIntegrationServiceTest.kt$L1TIntegrationServiceTest$@MockK private lateinit var l1TDocumentClient: L1TDocumentClient</ID>
    <ID>UnusedPrivateMember:L1TIntegrationServiceTest.kt$L1TIntegrationServiceTest$@MockK private lateinit var l1tStatusPushClient: L1TStatusPushClient</ID>
    <ID>UnusedPrivateMember:ResponseDTOTransferTest.kt$ResponseDTOTransferTest$private var version: String = "1.1"</ID>
    <ID>LargeClass:ApplicationService.kt$ApplicationService</ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$fun withdrawApplication(requestDTO: WithdrawApplicationDTO): L1TResponseDTO</ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$@Transactional fun processApplicationWithdrawal( applicationNumber: String, requestBody: WithdrawApplicationRequestDTO ): WithdrawApplicationResponseDTO</ID>
    <ID>LongMethod:ApplicationService.kt$ApplicationService$fun withdrawApplication(requestDTO: WithdrawApplicationDTO): L1TResponseDTO</ID>
    <ID>LongMethod:ApplicationService.kt$ApplicationService$@Transactional fun processApplicationWithdrawal( applicationNumber: String, requestBody: WithdrawApplicationRequestDTO ): WithdrawApplicationResponseDTO</ID>
    <ID>MaxLineLength:L1TStatusPushDTO.kt$L1TStatusPushRequestTransfer$applicationStatus = if (application.status.value === ApplicationStatus.WITHDRAWN.value) "WITHDRAWN BY AGENCY" else application.status.value</ID>
    <ID>ComplexMethod:ApplicationService.kt$ApplicationService$@Transactional fun processApplicationWithdrawal( applicationNumber: String, requestBody: WithdrawApplicationRequestDTO ): WithdrawApplicationResponseDTO</ID>
  </ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyFunctionBlock:MolbagencyportalbackendApplicationTests.kt$MolbagencyportalbackendApplicationTests${ }</ID>
    <ID>LargeClass:ApplicationService.kt$ApplicationService</ID>
    <ID>MaxLineLength:SecurityHeadersConfiguration.kt$SecurityHeadersFilter$override</ID>
    <ID>SpreadOperator:HttpConfiguration.kt$HttpConfiguration$(*corsAllowedHostnamesWhitelist.corsWhitelist.toTypedArray())</ID>
    <ID>SwallowedException:AuthHeaderFilter.kt$AuthHeaderFilter$ex: Exception</ID>
    <ID>SwallowedException:EncryptLicenceDataUtil.kt$EncryptLicenceDataUtil$e: IllegalArgumentException</ID>
    <ID>ThrowsCount:ApplicationService.kt$ApplicationService$fun reassignApplication(applicationNumber: String, userId: Long)</ID>
    <ID>TooGenericExceptionCaught:ApplicationService.kt$ApplicationService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AuthHeaderFilter.kt$AuthHeaderFilter$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:AwsSqsClient.kt$AwsSqsClient$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:DDSIntegrationService.kt$DDSIntegrationService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LicenceService.kt$LicenceService$e: Exception</ID>
  </CurrentIssues>
</SmellBaseline>
